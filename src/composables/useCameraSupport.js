import { ref } from 'vue'

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º–∞
const detectIncognito = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º–∞
    if (window.chrome && window.chrome.runtime && window.chrome.runtime.onConnect) {
      return false // –û–±—ã—á–Ω—ã–π Chrome
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IndexedDB (–≤ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
    if ('indexedDB' in window) {
      try {
        await new Promise((resolve, reject) => {
          const request = indexedDB.open('test')
          request.onerror = () => reject(new Error('IndexedDB blocked'))
          request.onsuccess = () => {
            request.result.close()
            resolve()
          }
        })
      } catch {
        return true // IndexedDB –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)
    try {
      localStorage.setItem('test', 'test')
      localStorage.removeItem('test')
    } catch {
      return true // localStorage –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const userAgent = navigator.userAgent.toLowerCase()
    if (userAgent.includes('incognito') || userAgent.includes('private')) {
      return true
    }

    return false
  } catch {
    return false
  }
}

export function useCameraSupport() {
  const hasCameraSupport = ref(false)
  const errorMessage = ref('')
  const isLoading = ref(false)

const checkCameraSupport = async () => {
  try {
    isLoading.value = true
    errorMessage.value = ''
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–º–µ—Ä—ã...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º
    const isIncognito = await detectIncognito()
    if (isIncognito) {
      console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º - —Ñ–æ–Ω–∞—Ä–∏–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å')
    }

    if (!navigator.mediaDevices) {
      throw new Error('navigator.mediaDevices –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    }

    if (!navigator.mediaDevices.getUserMedia) {
      throw new Error('getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const devices = await navigator.mediaDevices.enumerateDevices()
    const videoDevices = devices.filter(device => device.kind === 'videoinput')

    hasCameraSupport.value = videoDevices.length > 0

    if (!hasCameraSupport.value) {
      throw new Error('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ')
    }

    console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–º–µ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã:', error)

    let userMessage = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã'

    if (error.message.includes('mediaDevices –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')) {
      userMessage = '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.'
    } else if (error.message.includes('getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')) {
      userMessage = '–§—É–Ω–∫—Ü–∏—è getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä.'
    } else if (error.message.includes('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
      userMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã.'
    } else {
      userMessage = error.message
    }

    errorMessage.value = userMessage
    hasCameraSupport.value = false
  } finally {
    isLoading.value = false
  }
  }

  return {
    hasCameraSupport,
    errorMessage,
    isLoading,
    checkCameraSupport
  }
}
