import { ref } from 'vue'

export function useMusicMode() {
  const isPlayingMusic = ref(false)
  const currentRhythm = ref(null)
  const musicInterval = ref(null)

  const loadRhythmData = async () => {
    try {
      console.log('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∏—Ç–º–∞ –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞...')
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
      const rhythmData = await import('@/assets/data/beethoven_rhythm.json')
      currentRhythm.value = rhythmData.default
      console.log('‚úÖ –†–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', rhythmData.default)
      return rhythmData.default
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏—Ç–º–∞:', error)
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Ç–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      currentRhythm.value = {
        name: "–†–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π)",
        description: "–¢–∞ —Ç–∞ —Ç–∞ —Ç–∞–∞–∞",
        isCyclical: true,
        pattern: [
          { duration: 250, action: "on", description: "–¢–∞" },
          { duration: 250, action: "off", description: "–ø–∞—É–∑–∞" },
          { duration: 250, action: "on", description: "—Ç–∞" },
          { duration: 250, action: "off", description: "–ø–∞—É–∑–∞" },
          { duration: 250, action: "on", description: "—Ç–∞" },
          { duration: 250, action: "off", description: "–ø–∞—É–∑–∞" },
          { duration: 500, action: "on", description: "—Ç–∞–∞–∞" },
          { duration: 500, action: "off", description: "–¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞" }
        ]
      }
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞')
      return currentRhythm.value
    }
  }

  const playMusic = async (setFlashlightState) => {
    if (isPlayingMusic.value) {
      stopMusic()
      return
    }

    if (!currentRhythm.value) {
      await loadRhythmData()
    }

    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–∞—Ç—å —Ä–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞...')
    isPlayingMusic.value = true

    let currentNote = 0
    const pattern = currentRhythm.value.pattern

    const playNote = () => {
      if (!isPlayingMusic.value) {
        return
      }

      const note = pattern[currentNote]
      console.log(`üéµ –ò–≥—Ä–∞–µ–º –Ω–æ—Ç—É ${currentNote + 1}/${pattern.length}: ${note.description || note.action}`)

      // –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–∞—Ä–∏–∫
      if (note.action === 'on') {
        setFlashlightState(true)
      } else {
        setFlashlightState(false)
      }

      currentNote++

      // –ï—Å–ª–∏ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∏—Ç–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
      if (currentNote >= pattern.length) {
        if (currentRhythm.value.isCyclical) {
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ä–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞...')
          currentNote = 0
        } else {
          console.log('üéµ –†–∏—Ç–º –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')
          stopMusic()
          return
        }
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—Ç—É
      musicInterval.value = setTimeout(playNote, note.duration)
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    playNote()
  }

  const stopMusic = () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–∞—Ä–∏–∫')
    isPlayingMusic.value = false

    if (musicInterval.value) {
      clearTimeout(musicInterval.value)
      musicInterval.value = null
    }
  }

  const cleanup = () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...')
    stopMusic()
  }

  return {
    isPlayingMusic,
    currentRhythm,
    loadRhythmData,
    playMusic,
    stopMusic,
    cleanup
  }
}
